#!/usr/bin/env python
'''
Copyright (c) 2015 Thomas S. Phillips.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
'''

import cgi
import getopt
import re
import sqlite3
import sys
import time
import urllib

import BaseHTTPServer
import CGIHTTPServer
# import cgitb; cgitb.enable()

import inspect

class SlimHandler (CGIHTTPServer.CGIHTTPRequestHandler):

    def do_GET(self):
        f = open('./slim.html')
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write(f.read())
        f.close()
        return

    def do_POST(self):

        content_len = int(self.headers['Content-Length'])
        form_data = self.rfile.read(content_len)
        params = form_data.split('&')
        form = {}
        for p in params:
            (key, value) = p.split('=')
            value = urllib.unquote_plus(value)
            form[key] = value

        # TODO: use the form data to manage tickets
        print '================'
        print 'FORM:', form
        print '================'

        f = open('./slim.html')
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

        opts = [('--table', '')]
        if form['command'] == 'Read':
            opts.append(('-r', ''))
        elif form['command'] == 'Modify':
            opts.append(('-m', ''))
        elif form['command'] == 'Write':
            opts.append(('-w', ''))

        for (key, value) in form.iteritems():
            if key[0] != '-':
                key = '--' + key
            opts.append((key, value))
        issues = slim_exec(opts)

        if form['command'] == 'Modify':
            opts = [('--table', ''), ('-r', ''), ('--issue-id', form['issue-id'])]
            issues = slim_exec(opts)

        if form['command'] == 'Write':
            opts = [('--table', ''), ('-r', '')]
            issues = slim_exec(opts)

        html = f.read()
        html = html.replace('<!--issues-->', issues)
        self.wfile.write(html)
        f.close()
        return


help = '''NAME
    slim -- Super-Lighweight Issue Manager

SYNOPSIS
    slim <option> [argument ...]

DESCRIPTION
    The slim utility reads, stores, or modifies issue and comment records.

OPTIONS

    -r, --read
        Read an issue record.

    -w, --write
        Write an issue record.

    -m, --modify
        Modify an issue record.

    -c, --comment
        Comment on an issue.

    --server
        Start a web server.

    --csv
        Output using comma separated values

    -h, --help
        Display this message.

OPTIONS WITH ARGUMENTS

    --db <filename>
        Filename of the database file to use. Defaults to slim.sqlite3.

    --id, --issue-id <id>
        Unique identifier for the issue.

    --desc
        Description of the issue.

    --date-discovered <date>
        Data the issue was first discovered.

    --version-identified <version>
        First version that identified the issue.

    --unit-test-date <date>
        Date the unit test passed.

    --code-review-date <date>
        Date the code review passed.

    --integration-test-date, --alpha-test-date <date>
        Date the integration test passed.

    --system-test-date, --beta-test-date <date>
        Date the system test passed.

    --version-deployed <version>
        First version that resolves the issue.

FILES

    slim.html
        An HTML interface to slim.

    slim.sqlite3
        The SQLite3 database that stores issue and comment records.
'''


'''
Print a header for rows of issues.
'''
def print_header():
    print '''
issue-id   desc       date-disc  version-i  unit-test  code-revi  alpha-tes  beta-test  version-d
                      overed     dentified  -date      ew-date    t-date     -date      eployed
---------------------------------------------------------------------------------------------------'''


'''
Print an issue.
'''
def print_issue(issue, issue_fields, csv=None, table=None):

    p = re.compile('.*#(\d+).*')

    result = ''
    if table:
        result += '<tr>'
        for key in issue_fields:
            if 'date' in key:
                result += '<td style="white-space:nowrap">' + issue[key] + '</td>'
            elif key == 'issue_id':
                script = ''
                for i in issue_fields:
                    script += 'document.getElementById(\'' + i + '\').value = \'' + issue[i]  + '\';'
                script = "function f" + issue[key] + '(){' + script + '};'
                result += '\n<script>' + script + '</script>\n'
                result += '<td><a href="#' + issue[key] + '" onclick="' + 'f' + issue[key] + '();' + '">' + issue[key] + '</a></td>'
            else:
                m = p.match(issue[key])
                if m and m.group(1):
                    result += '<td>' + issue[key].replace(m.group(1), '<a href="#' + m.group(1) + '" onclick="' + 'f' + m.group(1) + '();' + '">' + m.group(1) + '</a>') + '</td>'
                else:
                    result += '<td>' + issue[key] + '</td>'
        result += '</tr>'
    elif csv:
        for key in issue_fields:
            result += ',' + issue[key]
        result = result[1:]
        print result
    else:
        for key in issue_fields:
            sys.stdout.write('{0:11}'.format(issue[key]))
            result += '{0:11}'.format(issue[key]);
        sys.stdout.write('\n')
        result += '\n'
    return result

'''
Initialize the slim.sqlite3 database. Create tables if necessary.
'''
def init_db(filename = 'slim.sqlite3'):

    # open the database
    conn = sqlite3.connect(filename)
    cursor = conn.cursor()

    # See if table exists
    cursor.execute('''
        SELECT name
        FROM sqlite_master
        WHERE type='table' AND name='issues';
        ''')
    issues_table_exists = cursor.fetchone()
    cursor.execute('''
        SELECT name
        FROM sqlite_master
        WHERE type='table' AND name='comments';
        ''')
    comments_table_exists = cursor.fetchone()

    if (issues_table_exists == None):
        # Create table
        cursor.execute('''
            CREATE TABLE issues (
                issue_id                text UNIQUE PRIMARY KEY,
                desc                    text,
                date_discovered         text,
                version_identified      text,
                unit_test_date          text,
                code_review_date        text,
                integration_test_date   text,
                system_test_date        text,
                version_deployed        text);
            ''')
        conn.commit()
    if (comments_table_exists == None):
        # Create comments table
        cursor.execute('''
            CREATE TABLE comments (
                issue_id        text,
                comment_id      text,
                date_created    text,
                comment         text);
            ''')
        conn.commit()
    return (conn, cursor)

def write_issue(conn, cursor, issue):
    if issue['issue_id'] == '' or issue['desc'] == '':
        print 'ERROR: issue_id or desc blank'
        return '0'
    try:
        cursor.execute('''
            REPLACE INTO issues
            (issue_id, desc, date_discovered, version_identified,
             unit_test_date,
             code_review_date, integration_test_date, system_test_date,
             version_deployed)
            VALUES
            (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', ( \
            issue['issue_id'], \
            issue['desc'], \
            issue['date_discovered'], \
            issue['version_identified'], \
            issue['unit_test_date'], \
            issue['code_review_date'], \
            issue['integration_test_date'], \
            issue['system_test_date'], \
            issue['version_deployed'] \
            ))
        conn.commit()
    except:
        print 'Could not write new issue record.'
        sys.exit(0)
    print issue['issue_id']
    return issue['issue_id']

def read_issue(conn, cursor, issue):
    term_list = []
    for pair in issue.items():
        if pair[1] != '':
            if pair[1][0] in ['<', '>']:
                term = pair[0] + " " + pair[1][0] + " '" + pair[1][1:] + "'"
            elif pair[1][0] == '!':
                term = pair[0] + " NOT LIKE '" + pair[1][1:] + "'"
            else:
                term = pair[0] + " LIKE '" + pair[1] + "'"
            term_list.append(term)
    search = ''
    if len(term_list) > 0:
        search = 'WHERE ' + ' AND '.join(term_list)

    try:
        cursor.execute('''
            SELECT
                issue_id, desc, date_discovered, version_identified,
                unit_test_date,
                code_review_date, integration_test_date, system_test_date,
                version_deployed
            FROM issues
            {}
            ORDER BY version_deployed, system_test_date,
            integration_test_date, code_review_date, unit_test_date,
            date_discovered
            '''.format(search))
    except:
        sys.stderr.write('ERROR: SELECT failed\n');
    issue_list = []
    cur_issue = {}
    for row in cursor:
        cur_issue['issue_id']               = row[0]
        cur_issue['desc']                   = row[1]
        cur_issue['date_discovered']        = row[2]
        cur_issue['version_identified']     = row[3]
        cur_issue['unit_test_date']         = row[4]
        cur_issue['code_review_date']       = row[5]
        cur_issue['integration_test_date']  = row[6]
        cur_issue['system_test_date']       = row[7]
        cur_issue['version_deployed']       = row[8]
        issue_list.append(cur_issue.copy())

    return issue_list

def modify_issue(conn, cursor, issue):
    if issue['issue_id'] == '':
        return [] # no global mods!
    search = {'issue_id':issue['issue_id']}
    issue_list = read_issue(conn, cursor, search)
    for old_issue in issue_list:
        for key in issue.keys():
            # copy over if not empty string
            if (issue[key] != ''):
                old_issue[key] = issue[key]
        write_issue(conn, cursor, old_issue)
    issue_list = read_issue(conn, cursor, search)
    return issue_list

def main():
    # parse command line options
    option_list =  ['help', \
                    'read', \
                    'write', \
                    'modify', \
                    'comment', \
                    'csv', \
                    'table', \
                    'server', \
                    'db=', \
                    'id=', \
                    'issue-id=', \
                    'desc=', \
                    'date-discovered=', \
                    'version-identified=', \
                    'unit-test-date=', \
                    'code-review-date=', \
                    'integration-test-date=', \
                    'alpha-test-date=', \
                    'system-test-date=', \
                    'beta-test-date=', \
                    'version-deployed=' \
                    ]
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'hrwmc', option_list)
    except getopt.error, msg:
        print msg
        print 'What? Trying using --help for help.'
        sys.exit(2)
    slim_exec(opts)

'''
opts is a list of (key,value) pairs.
'''
def slim_exec(opts):

    # issue and comment data structures
    issue_fields = ('issue_id', \
                    'desc', \
                    'date_discovered', \
                    'version_identified', \
                    'unit_test_date',\
                    'code_review_date', \
                    'integration_test_date', \
                    'system_test_date', \
                    'version_deployed')

    comment_fields = ('issue_id', \
                      'comment_id', \
                      'date_created', \
                      'comment')

    issue = {}
    for key in issue_fields:
        issue[key] = '';

    comment = {}
    for key in comment_fields:
        comment[key] = '';

    # process options
    csv = False
    table = False
    command = ''
    db = 'slim.sqlite3'
    # print opts
    for o, a in opts:
        if o in ('-h', '--help'):
            print help
            sys.exit(0)
        if o in ('-r', '--read'):
            command = 'read'
        if o in ('-w', '--write'):
            command = 'write'
        if o in ('-m', '--modify'):
            command = 'modify'
        if o in ('-c', '--comment'):
            command = 'comment'

        if o in ('--server'):
            command = 'server'

        if o in ('--csv'):
            csv = True

        if o in ('--table'):
            table = True

        if o in ('--db'):
            db = a

        if o in ('--id', '--issue-id'):
            issue['issue_id'] = a
        if o in ('--desc'):
            issue['desc'] = a
        if o in ('--date-discovered'):
            issue['date_discovered'] = a
        if o in ('--version-identified'):
            issue['version_identified'] = a
        if o in ('--unit-test-date'):
            issue['unit_test_date'] = a
        if o in ('--code-review-date'):
            issue['code_review_date'] = a
        if o in ('--integration-test-date', '--alpha-test-date'):
            issue['integration_test_date'] = a
        if o in ('--system-test-date', '--beta-test-date'):
            issue['system_test_date'] = a
        if o in ('--version-deployed'):
            issue['version_deployed'] = a

    (conn, cursor) = init_db(db)

    result = ''

    if (command == 'read'):
        issue_list = read_issue(conn, cursor, issue)
        if (not (csv or table)):
            print_header()
        for issue in issue_list:
            result += print_issue(issue, issue_fields, csv, table)
    if (command == 'write'):
        if (issue['issue_id'] == ''):
            issue['issue_id'] = str(int(time.time()))
        result += write_issue(conn, cursor, issue)
    if (command == 'modify'):
        issue_list = modify_issue(conn, cursor, issue)

    if (command == 'server'):
        try:
            server = BaseHTTPServer.HTTPServer(('127.0.0.1', 5150), SlimHandler)
            print "========================================"
            print "It's alive!  It's alive!"
            print "Starting a web server on port 5150."
            print "Talk to me."
            print "========================================"
            server.serve_forever()
        except KeyboardInterrupt:
            print "\n========================================"
            print "Got a Hi-^C.  And I could've had a V8!"
            print "This is the way the world ends"
            print "This is the way the world ends"
            print "This is the way the world ends"
            print "Et tu, Brute?"
            print "========================================"
            server.socket.close()

    # close the database
    conn.close()

    # Return any output
    return result

if __name__ == '__main__':
    main()
