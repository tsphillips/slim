#!/usr/bin/env python

'''NAME
    slim -- Super-Lighweight Issue Manager

SYNOPSIS
    slim <option> [argument ...]

DESCRIPTION
    The slim utility reads, stores, or modifies issue and comment records.

OPTIONS

    --read
        Read an issue record.

    --write
        Write an issue record.

    --modify
        Modify an issue record.

    --help
        Display this message.

ARGUMENTS

    --id <id>
        Unique identifier for the issue.

    --date-discovered <date>
        Data the issue was first discovered.

    --version-identified <version>
        First version that identified the issue.

    --unit-test-date <date>
        Date the unit test passed.

    --code-review-date <date>
        Date the code review passed.

    --integration-test-date <date>
        Date the integration test passed.

    --system-test-date <date>
        Date the system test passed.

    --version-deployed <version>
        First version that resolves the issue.

FILES

    slim.html
        An HTML interface to slim.

    slim.sqlite3
        The SQLite3 database that stores issue and comment records.
'''
import sys
import getopt
import sqlite3

'''
Initialize the slim.sqlite3 database. Create tables if necessary.
'''
def init_db(filename):

    # open the database
    conn = sqlite3.connect('slim.sqlite3')
    cursor = conn.cursor()

    # See if table exists
    cursor.execute('''
        SELECT name
        FROM sqlite_master
        WHERE type='table' AND name='issues';
        ''')
    issues_table_exists = cursor.fetchone()
    cursor.execute('''
        SELECT name
        FROM sqlite_master
        WHERE type='table' AND name='comments';
        ''')
    comments_table_exists = cursor.fetchone()

    if (issues_table_exists == None):
        # Create table
        cursor.execute('''
            CREATE TABLE issues (
                issue_id                text PRIMARY KEY,
                name                    text,
                date_discovered         text,
                version_identified      text,
                unit_test_date          text,
                code_review_date        text,
                integration_test_date   text,
                system_test_date        text,
                version_deployed        text);
            ''')
        conn.commit()
    if (comments_table_exists == None):
        # Create comments table
        cursor.execute('''
            CREATE TABLE comments (
                issue_id        text,
                comment_id      text,
                date_created    text,
                comment         text);
            ''')
        conn.commit()
    return (conn, cursor)

def write_issue(conn, cursor, issue):
    cursor.execute('''
        REPLACE INTO issues
        (issue_id, name, date_discovered, version_identified, unit_test_date,
         code_review_date, integration_test_date, system_test_date,
         version_deployed)
        VALUES
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', ( \
        issue['id'], \
        issue['name'], \
        issue['date_discovered'], \
        issue['version_identified'], \
        issue['unit_test_date'], \
        issue['code_review_date'], \
        issue['integration_test_date'], \
        issue['system_test_date'], \
        issue['version_deployed'] \
        ))
    conn.commit()

def main():
    # parse command line options
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'h', \
                                   ['help', \
                                    'read', \
                                    'write', \
                                    'modify', \
                                    'id=', \
                                    'name=', \
                                    'date-discovered=', \
                                    'version-identified=', \
                                    'unit-test-date=', \
                                    'code-review-date=', \
                                    'integration-test-date=', \
                                    'system-test-date=', \
                                    'version-deployed=' \
                                    ])
    except getopt.error, msg:
        print msg
        print 'What? Trying using --help for help.'
        sys.exit(2)

    # issue and comment data structures
    issue = {}
    issue['id'] = '0'
    issue['name'] = 'empty issue'
    issue['date_discovered'] = ''
    issue['version_identified'] = ''
    issue['unit_test_date'] = ''
    issue['code_review_date'] = ''
    issue['integration_test_date'] = ''
    issue['system_test_date'] = ''
    issue['version_deployed'] = ''

    comment = {}

    # process options
    for o, a in opts:
        if o in ('-h', '--help'):
            print __doc__
            sys.exit(0)
        if o in ('--read'):
            option = 'read'
        if o in ('--write'):
            option = 'write'
        if o in ('--modify'):
            option = 'modify'

        if o in ('--id'):
            issue['id'] = a
        if o in ('--name'):
            issue['name'] = a
        if o in ('--date-discovered'):
            issue['date_discovered'] = a
        if o in ('--version-identified'):
            issue['version_identified'] = a
        if o in ('--unit-test-date'):
            issue['unit_test_date'] = a
        if o in ('--code-review-date'):
            issue['code_review_date'] = a
        if o in ('--integration-test-date'):
            issue['integration_test_date'] = a
        if o in ('--system-test-date'):
            issue['system_test_date'] = a
        if o in ('--version-deployed'):
            issue['version_deployed'] = a

    (conn, cursor) = init_db('slim.sqlite3')

    if (option == 'read'):
        read_issue(conn, cursor, issue)
    if (option == 'write'):
        write_issue(conn, cursor, issue)

    # close the database
    conn.close()

if __name__ == '__main__':
    main()
